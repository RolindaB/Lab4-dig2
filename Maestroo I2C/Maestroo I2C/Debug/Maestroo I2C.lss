
Maestroo I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000b68  00000bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800120  00800120  00000c1c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001344  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000987  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a99  00000000  00000000  00002a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  0000350c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000561  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bfa  00000000  00000000  00003ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000048c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 34       	cpi	r26, 0x42	; 66
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  9e:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
		*buffer = TWDR; // Lee el dato recibido
		return 0; // Recepción exitosa
		} else {
		return estado; // Retorna el código de error
	}
}
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	6b 01       	movw	r12, r22
  b0:	7c 01       	movw	r14, r24
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	87 b9       	out	0x07, r24	; 7
  b8:	44 30       	cpi	r20, 0x04	; 4
  ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
  c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
  c4:	40 31       	cpi	r20, 0x10	; 16
  c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
  c8:	40 34       	cpi	r20, 0x40	; 64
  ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
  cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
  ce:	e9 eb       	ldi	r30, 0xB9	; 185
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	80 83       	st	Z, r24
  d8:	1d c0       	rjmp	.+58     	; 0x114 <I2C_Master_Init+0x6e>
  da:	e9 eb       	ldi	r30, 0xB9	; 185
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	80 83       	st	Z, r24
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
  ea:	14 c0       	rjmp	.+40     	; 0x114 <I2C_Master_Init+0x6e>
  ec:	e9 eb       	ldi	r30, 0xB9	; 185
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
  fc:	0b c0       	rjmp	.+22     	; 0x114 <I2C_Master_Init+0x6e>
  fe:	e9 eb       	ldi	r30, 0xB9	; 185
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	83 60       	ori	r24, 0x03	; 3
 106:	80 83       	st	Z, r24
 108:	05 c0       	rjmp	.+10     	; 0x114 <I2C_Master_Init+0x6e>
 10a:	e9 eb       	ldi	r30, 0xB9	; 185
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	80 83       	st	Z, r24
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	74 e2       	ldi	r23, 0x24	; 36
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	a7 01       	movw	r20, r14
 11e:	96 01       	movw	r18, r12
 120:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodsi4>
 124:	ca 01       	movw	r24, r20
 126:	b9 01       	movw	r22, r18
 128:	60 51       	subi	r22, 0x10	; 16
 12a:	71 09       	sbc	r23, r1
 12c:	81 09       	sbc	r24, r1
 12e:	91 09       	sbc	r25, r1
 130:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	23 70       	andi	r18, 0x03	; 3
 136:	42 e0       	ldi	r20, 0x02	; 2
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	fa 01       	movw	r30, r20
 13c:	02 c0       	rjmp	.+4      	; 0x142 <I2C_Master_Init+0x9c>
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <I2C_Master_Init+0x98>
 146:	9f 01       	movw	r18, r30
 148:	03 2e       	mov	r0, r19
 14a:	00 0c       	add	r0, r0
 14c:	44 0b       	sbc	r20, r20
 14e:	55 0b       	sbc	r21, r21
 150:	0e 94 98 02 	call	0x530	; 0x530 <__udivmodsi4>
 154:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 158:	ec eb       	ldi	r30, 0xBC	; 188
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	80 83       	st	Z, r24
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	df 90       	pop	r13
 168:	cf 90       	pop	r12
 16a:	08 95       	ret

0000016c <I2C_Master_Stop>:
 16c:	84 e9       	ldi	r24, 0x94	; 148
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	84 fd       	sbrc	r24, 4
 178:	fc cf       	rjmp	.-8      	; 0x172 <I2C_Master_Stop+0x6>
 17a:	08 95       	ret

0000017c <read_from_slave>:
	
uint8_t read_from_slave(uint8_t direccion_esclavo, uint8_t *dato) {
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 17c:	94 ea       	ldi	r25, 0xA4	; 164
 17e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 182:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 186:	99 23       	and	r25, r25
 188:	e4 f7       	brge	.-8      	; 0x182 <read_from_slave+0x6>

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
 18a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 18e:	98 7f       	andi	r25, 0xF8	; 248
 190:	98 30       	cpi	r25, 0x08	; 8
 192:	99 f5       	brne	.+102    	; 0x1fa <read_from_slave+0x7e>

	// Enviar dirección del esclavo con bit de lectura
	TWDR = (direccion_esclavo << 1) | 1; // SLA + R (bit de lectura)
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 1a0:	84 e8       	ldi	r24, 0x84	; 132
 1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 1a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1aa:	88 23       	and	r24, r24
 1ac:	e4 f7       	brge	.-8      	; 0x1a6 <read_from_slave+0x2a>
 1ae:	fb 01       	movw	r30, r22

	// Verificar estado de la dirección del esclavo
	if ((TWSR & 0xF8) != 0x40) {
 1b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b4:	88 7f       	andi	r24, 0xF8	; 248
 1b6:	80 34       	cpi	r24, 0x40	; 64
 1b8:	21 f0       	breq	.+8      	; 0x1c2 <read_from_slave+0x46>
		I2C_Master_Stop(); // Detener si se recibe un NACK o estado inesperado
 1ba:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Stop>
		return 1; // Error: No se pudo recibir ACK del esclavo
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
	}

	// Leer el dato del esclavo
	TWCR = (1 << TWINT) | (1 << TWEN);
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 1c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1cc:	88 23       	and	r24, r24
 1ce:	e4 f7       	brge	.-8      	; 0x1c8 <read_from_slave+0x4c>

	// Verificar estado del dato recibido
	if ((TWSR & 0xF8) != 0x58 && (TWSR & 0xF8) != 0x50) {
 1d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1d4:	88 7f       	andi	r24, 0xF8	; 248
 1d6:	88 35       	cpi	r24, 0x58	; 88
 1d8:	49 f0       	breq	.+18     	; 0x1ec <read_from_slave+0x70>
 1da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1de:	88 7f       	andi	r24, 0xF8	; 248
 1e0:	80 35       	cpi	r24, 0x50	; 80
 1e2:	21 f0       	breq	.+8      	; 0x1ec <read_from_slave+0x70>
		I2C_Master_Stop(); // Detener si hay error en la recepción
 1e4:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Stop>
		return 1; // Error en la recepción
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	08 95       	ret
	}

	*dato = TWDR; // Leer el dato recibido
 1ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1f0:	80 83       	st	Z, r24
	I2C_Master_Stop(); // Generar condición de STOP
 1f2:	0e 94 b6 00 	call	0x16c	; 0x16c <I2C_Master_Stop>
	return 0; // Éxito
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret
	// Iniciar condición de START
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete

	// Verificar estado de START
	if ((TWSR & 0xF8) != 0x08) return 1; // Error: No se pudo iniciar la condición de START
 1fa:	81 e0       	ldi	r24, 0x01	; 1
	}

	*dato = TWDR; // Leer el dato recibido
	I2C_Master_Stop(); // Generar condición de STOP
	return 0; // Éxito
}
 1fc:	08 95       	ret

000001fe <LCD_port>:
	LCD_CMD(0x1C);
}

//desplazamiento hacia la izquierda
void Lcd_Shift_Left(void) {
	LCD_CMD(0x18);
 1fe:	80 ff       	sbrs	r24, 0
 200:	04 c0       	rjmp	.+8      	; 0x20a <LCD_port+0xc>
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	94 60       	ori	r25, 0x04	; 4
 206:	9b b9       	out	0x0b, r25	; 11
 208:	03 c0       	rjmp	.+6      	; 0x210 <LCD_port+0x12>
 20a:	9b b1       	in	r25, 0x0b	; 11
 20c:	9b 7f       	andi	r25, 0xFB	; 251
 20e:	9b b9       	out	0x0b, r25	; 11
 210:	81 ff       	sbrs	r24, 1
 212:	04 c0       	rjmp	.+8      	; 0x21c <LCD_port+0x1e>
 214:	9b b1       	in	r25, 0x0b	; 11
 216:	98 60       	ori	r25, 0x08	; 8
 218:	9b b9       	out	0x0b, r25	; 11
 21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_port+0x24>
 21c:	9b b1       	in	r25, 0x0b	; 11
 21e:	97 7f       	andi	r25, 0xF7	; 247
 220:	9b b9       	out	0x0b, r25	; 11
 222:	82 ff       	sbrs	r24, 2
 224:	04 c0       	rjmp	.+8      	; 0x22e <LCD_port+0x30>
 226:	9b b1       	in	r25, 0x0b	; 11
 228:	90 61       	ori	r25, 0x10	; 16
 22a:	9b b9       	out	0x0b, r25	; 11
 22c:	03 c0       	rjmp	.+6      	; 0x234 <LCD_port+0x36>
 22e:	9b b1       	in	r25, 0x0b	; 11
 230:	9f 7e       	andi	r25, 0xEF	; 239
 232:	9b b9       	out	0x0b, r25	; 11
 234:	83 ff       	sbrs	r24, 3
 236:	04 c0       	rjmp	.+8      	; 0x240 <LCD_port+0x42>
 238:	9b b1       	in	r25, 0x0b	; 11
 23a:	90 62       	ori	r25, 0x20	; 32
 23c:	9b b9       	out	0x0b, r25	; 11
 23e:	03 c0       	rjmp	.+6      	; 0x246 <LCD_port+0x48>
 240:	9b b1       	in	r25, 0x0b	; 11
 242:	9f 7d       	andi	r25, 0xDF	; 223
 244:	9b b9       	out	0x0b, r25	; 11
 246:	84 ff       	sbrs	r24, 4
 248:	04 c0       	rjmp	.+8      	; 0x252 <LCD_port+0x54>
 24a:	9b b1       	in	r25, 0x0b	; 11
 24c:	90 64       	ori	r25, 0x40	; 64
 24e:	9b b9       	out	0x0b, r25	; 11
 250:	03 c0       	rjmp	.+6      	; 0x258 <LCD_port+0x5a>
 252:	9b b1       	in	r25, 0x0b	; 11
 254:	9f 7b       	andi	r25, 0xBF	; 191
 256:	9b b9       	out	0x0b, r25	; 11
 258:	85 ff       	sbrs	r24, 5
 25a:	04 c0       	rjmp	.+8      	; 0x264 <LCD_port+0x66>
 25c:	9b b1       	in	r25, 0x0b	; 11
 25e:	90 68       	ori	r25, 0x80	; 128
 260:	9b b9       	out	0x0b, r25	; 11
 262:	03 c0       	rjmp	.+6      	; 0x26a <LCD_port+0x6c>
 264:	9b b1       	in	r25, 0x0b	; 11
 266:	9f 77       	andi	r25, 0x7F	; 127
 268:	9b b9       	out	0x0b, r25	; 11
 26a:	86 ff       	sbrs	r24, 6
 26c:	04 c0       	rjmp	.+8      	; 0x276 <LCD_port+0x78>
 26e:	95 b1       	in	r25, 0x05	; 5
 270:	91 60       	ori	r25, 0x01	; 1
 272:	95 b9       	out	0x05, r25	; 5
 274:	03 c0       	rjmp	.+6      	; 0x27c <LCD_port+0x7e>
 276:	95 b1       	in	r25, 0x05	; 5
 278:	9e 7f       	andi	r25, 0xFE	; 254
 27a:	95 b9       	out	0x05, r25	; 5
 27c:	88 23       	and	r24, r24
 27e:	24 f4       	brge	.+8      	; 0x288 <LCD_port+0x8a>
 280:	85 b1       	in	r24, 0x05	; 5
 282:	82 60       	ori	r24, 0x02	; 2
 284:	85 b9       	out	0x05, r24	; 5
 286:	08 95       	ret
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	8d 7f       	andi	r24, 0xFD	; 253
 28c:	85 b9       	out	0x05, r24	; 5
 28e:	08 95       	ret

00000290 <LCD_CMD>:
 290:	95 b1       	in	r25, 0x05	; 5
 292:	9b 7f       	andi	r25, 0xFB	; 251
 294:	95 b9       	out	0x05, r25	; 5
 296:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_port>
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	85 e0       	ldi	r24, 0x05	; 5
 2a2:	8a 95       	dec	r24
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_CMD+0x12>
 2a6:	00 00       	nop
 2a8:	85 b1       	in	r24, 0x05	; 5
 2aa:	87 7f       	andi	r24, 0xF7	; 247
 2ac:	85 b9       	out	0x05, r24	; 5
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9f e1       	ldi	r25, 0x1F	; 31
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_CMD+0x22>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_CMD+0x28>
 2b8:	00 00       	nop
 2ba:	08 95       	ret

000002bc <initLCD8bits>:
 2bc:	8a b1       	in	r24, 0x0a	; 10
 2be:	8c 6f       	ori	r24, 0xFC	; 252
 2c0:	8a b9       	out	0x0a, r24	; 10
 2c2:	1b b8       	out	0x0b, r1	; 11
 2c4:	84 b1       	in	r24, 0x04	; 4
 2c6:	8f 60       	ori	r24, 0x0F	; 15
 2c8:	84 b9       	out	0x04, r24	; 4
 2ca:	15 b8       	out	0x05, r1	; 5
 2cc:	2f ef       	ldi	r18, 0xFF	; 255
 2ce:	89 ef       	ldi	r24, 0xF9	; 249
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <initLCD8bits+0x16>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <initLCD8bits+0x20>
 2dc:	00 00       	nop
 2de:	88 e3       	ldi	r24, 0x38	; 56
 2e0:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
 2e4:	8f e1       	ldi	r24, 0x1F	; 31
 2e6:	9e e4       	ldi	r25, 0x4E	; 78
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <initLCD8bits+0x2c>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <initLCD8bits+0x32>
 2ee:	00 00       	nop
 2f0:	88 e3       	ldi	r24, 0x38	; 56
 2f2:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <initLCD8bits+0x3e>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <initLCD8bits+0x44>
 300:	00 00       	nop
 302:	88 e3       	ldi	r24, 0x38	; 56
 304:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
 308:	8f e9       	ldi	r24, 0x9F	; 159
 30a:	9f e0       	ldi	r25, 0x0F	; 15
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <initLCD8bits+0x50>
 310:	00 c0       	rjmp	.+0      	; 0x312 <initLCD8bits+0x56>
 312:	00 00       	nop
 314:	88 e3       	ldi	r24, 0x38	; 56
 316:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
 326:	8f e3       	ldi	r24, 0x3F	; 63
 328:	9f e1       	ldi	r25, 0x1F	; 31
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <initLCD8bits+0x6e>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <initLCD8bits+0x74>
 330:	00 00       	nop
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
 338:	08 95       	ret

0000033a <LCD_WriteCaracter>:
 33a:	95 b1       	in	r25, 0x05	; 5
 33c:	94 60       	ori	r25, 0x04	; 4
 33e:	95 b9       	out	0x05, r25	; 5
 340:	0e 94 ff 00 	call	0x1fe	; 0x1fe <LCD_port>
 344:	85 b1       	in	r24, 0x05	; 5
 346:	88 60       	ori	r24, 0x08	; 8
 348:	85 b9       	out	0x05, r24	; 5
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_WriteCaracter+0x12>
 350:	00 00       	nop
 352:	85 b1       	in	r24, 0x05	; 5
 354:	87 7f       	andi	r24, 0xF7	; 247
 356:	85 b9       	out	0x05, r24	; 5
 358:	8f e3       	ldi	r24, 0x3F	; 63
 35a:	9f e1       	ldi	r25, 0x1F	; 31
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_WriteCaracter+0x22>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_WriteCaracter+0x28>
 362:	00 00       	nop
 364:	08 95       	ret

00000366 <LCD_Write_String>:
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	8c 01       	movw	r16, r24
 370:	c0 e0       	ldi	r28, 0x00	; 0
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	03 c0       	rjmp	.+6      	; 0x37c <LCD_Write_String+0x16>
 376:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_WriteCaracter>
 37a:	21 96       	adiw	r28, 0x01	; 1
 37c:	f8 01       	movw	r30, r16
 37e:	ec 0f       	add	r30, r28
 380:	fd 1f       	adc	r31, r29
 382:	80 81       	ld	r24, Z
 384:	81 11       	cpse	r24, r1
 386:	f7 cf       	rjmp	.-18     	; 0x376 <LCD_Write_String+0x10>
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <LCD_Set_Cursor>:
}

//Establecer cursor
void LCD_Set_Cursor(char c, char f) {
 392:	cf 93       	push	r28
	char temp;
	if (f == 1) {
 394:	61 30       	cpi	r22, 0x01	; 1
 396:	31 f4       	brne	.+12     	; 0x3a4 <LCD_Set_Cursor+0x12>
		temp = 0x80 + c - 1;
 398:	cf e7       	ldi	r28, 0x7F	; 127
 39a:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
 39c:	8c 2f       	mov	r24, r28
 39e:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <LCD_Set_Cursor+0x20>
		} else if (f == 2) {
 3a4:	62 30       	cpi	r22, 0x02	; 2
 3a6:	29 f4       	brne	.+10     	; 0x3b2 <LCD_Set_Cursor+0x20>
		temp = 0xC0 + c - 1;
 3a8:	cf eb       	ldi	r28, 0xBF	; 191
 3aa:	c8 0f       	add	r28, r24
		LCD_CMD(temp);
 3ac:	8c 2f       	mov	r24, r28
 3ae:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
	}
	LCD_CMD(temp);
 3b2:	8c 2f       	mov	r24, r28
 3b4:	0e 94 48 01 	call	0x290	; 0x290 <LCD_CMD>
}
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <ADCI2C>:
uint8_t adc_value, counter;
char buffer[16];
char buffer1[16];

void ADCI2C(){
	uint8_t result = read_from_slave(SLAVE1_ADDR, &adc_value);
 3bc:	60 e2       	ldi	r22, 0x20	; 32
 3be:	71 e0       	ldi	r23, 0x01	; 1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 be 00 	call	0x17c	; 0x17c <read_from_slave>

	if (result == 0) {
 3c6:	81 11       	cpse	r24, r1
 3c8:	1a c0       	rjmp	.+52     	; 0x3fe <ADCI2C+0x42>
		// Si la lectura es exitosa
		snprintf(buffer, sizeof(buffer), " %u", adc_value);
 3ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 3ce:	1f 92       	push	r1
 3d0:	8f 93       	push	r24
 3d2:	85 e0       	ldi	r24, 0x05	; 5
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	9f 93       	push	r25
 3d8:	8f 93       	push	r24
 3da:	1f 92       	push	r1
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	8f 93       	push	r24
 3e0:	81 e2       	ldi	r24, 0x21	; 33
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	9f 93       	push	r25
 3e6:	8f 93       	push	r24
 3e8:	0e 94 ba 02 	call	0x574	; 0x574 <snprintf>
 3ec:	8d b7       	in	r24, 0x3d	; 61
 3ee:	9e b7       	in	r25, 0x3e	; 62
 3f0:	08 96       	adiw	r24, 0x08	; 8
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	9e bf       	out	0x3e, r25	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	8d bf       	out	0x3d, r24	; 61
 3fc:	08 95       	ret
		} else {
		// Maneja el error de lectura
		snprintf(buffer, sizeof(buffer), "Error %u", result);
 3fe:	1f 92       	push	r1
 400:	8f 93       	push	r24
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	9f 93       	push	r25
 408:	8f 93       	push	r24
 40a:	1f 92       	push	r1
 40c:	80 e1       	ldi	r24, 0x10	; 16
 40e:	8f 93       	push	r24
 410:	81 e2       	ldi	r24, 0x21	; 33
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	9f 93       	push	r25
 416:	8f 93       	push	r24
 418:	0e 94 ba 02 	call	0x574	; 0x574 <snprintf>
 41c:	8d b7       	in	r24, 0x3d	; 61
 41e:	9e b7       	in	r25, 0x3e	; 62
 420:	08 96       	adiw	r24, 0x08	; 8
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	9e bf       	out	0x3e, r25	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	8d bf       	out	0x3d, r24	; 61
 42c:	08 95       	ret

0000042e <CounterI2C>:
	}
}
void CounterI2C(){
	uint8_t result = read_from_slave(SLAVE2_ADDR, &counter);
 42e:	61 e3       	ldi	r22, 0x31	; 49
 430:	71 e0       	ldi	r23, 0x01	; 1
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	0e 94 be 00 	call	0x17c	; 0x17c <read_from_slave>

	if (result == 0) {
 438:	81 11       	cpse	r24, r1
 43a:	1a c0       	rjmp	.+52     	; 0x470 <CounterI2C+0x42>
		// Si la lectura es exitosa
		snprintf(buffer1, sizeof(buffer1), " %u", counter);
 43c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <counter>
 440:	1f 92       	push	r1
 442:	8f 93       	push	r24
 444:	85 e0       	ldi	r24, 0x05	; 5
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	9f 93       	push	r25
 44a:	8f 93       	push	r24
 44c:	1f 92       	push	r1
 44e:	80 e1       	ldi	r24, 0x10	; 16
 450:	8f 93       	push	r24
 452:	82 e3       	ldi	r24, 0x32	; 50
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	9f 93       	push	r25
 458:	8f 93       	push	r24
 45a:	0e 94 ba 02 	call	0x574	; 0x574 <snprintf>
 45e:	8d b7       	in	r24, 0x3d	; 61
 460:	9e b7       	in	r25, 0x3e	; 62
 462:	08 96       	adiw	r24, 0x08	; 8
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	9e bf       	out	0x3e, r25	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	8d bf       	out	0x3d, r24	; 61
 46e:	08 95       	ret
		} else {
		// Maneja el error de lectura
		snprintf(buffer1, sizeof(buffer1), "Error %u", result);
 470:	1f 92       	push	r1
 472:	8f 93       	push	r24
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	9f 93       	push	r25
 47a:	8f 93       	push	r24
 47c:	1f 92       	push	r1
 47e:	80 e1       	ldi	r24, 0x10	; 16
 480:	8f 93       	push	r24
 482:	82 e3       	ldi	r24, 0x32	; 50
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	9f 93       	push	r25
 488:	8f 93       	push	r24
 48a:	0e 94 ba 02 	call	0x574	; 0x574 <snprintf>
 48e:	8d b7       	in	r24, 0x3d	; 61
 490:	9e b7       	in	r25, 0x3e	; 62
 492:	08 96       	adiw	r24, 0x08	; 8
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	9e bf       	out	0x3e, r25	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	8d bf       	out	0x3d, r24	; 61
 49e:	08 95       	ret

000004a0 <main>:
	}
	
}
int main(void) {
	// Inicializa el LCD
	initLCD8bits(); // Asegúrate de que esta función configure el LCD correctamente
 4a0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <initLCD8bits>
	// Inicializa el bus I2C con 100 kHz y prescaler 1
	I2C_Master_Init(100, 4);
 4a4:	44 e0       	ldi	r20, 0x04	; 4
 4a6:	64 e6       	ldi	r22, 0x64	; 100
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>

	sei(); // Habilita las interrupciones globales
 4b2:	78 94       	sei

	while (1) {
		// Lee un byte del esclavo
		ADCI2C();
 4b4:	0e 94 de 01 	call	0x3bc	; 0x3bc <ADCI2C>
		CounterI2C();
 4b8:	0e 94 17 02 	call	0x42e	; 0x42e <CounterI2C>
	//ADC:
		LCD_Set_Cursor(1, 2); // Posiciona el cursor en la primera línea del LCD
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_Set_Cursor>
		LCD_Write_String("        "); // Limpia la línea
 4c4:	89 e0       	ldi	r24, 0x09	; 9
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_Write_String>
		LCD_Set_Cursor(1, 2); // Posiciona el cursor nuevamente
 4cc:	62 e0       	ldi	r22, 0x02	; 2
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_Set_Cursor>
		LCD_Write_String(buffer); // Muestra el valor o el error
 4d4:	81 e2       	ldi	r24, 0x21	; 33
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_Write_String>
		LCD_Set_Cursor(2, 1); // Posiciona el cursor nuevamente
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_Set_Cursor>
		LCD_Write_String("ADC:"); // Muestra el valor o el error
 4e4:	82 e1       	ldi	r24, 0x12	; 18
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_Write_String>
	//CONTADOR;
		LCD_Set_Cursor(9, 2); // Posiciona el cursor en la primera línea del LCD
 4ec:	62 e0       	ldi	r22, 0x02	; 2
 4ee:	89 e0       	ldi	r24, 0x09	; 9
 4f0:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_Set_Cursor>
		LCD_Write_String("        "); // Limpia la línea
 4f4:	89 e0       	ldi	r24, 0x09	; 9
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_Write_String>
		LCD_Set_Cursor(9, 2); // Posiciona el cursor nuevamente
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	89 e0       	ldi	r24, 0x09	; 9
 500:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_Set_Cursor>
		LCD_Write_String(buffer1); // Muestra el valor o el error
 504:	82 e3       	ldi	r24, 0x32	; 50
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_Write_String>
		LCD_Set_Cursor(9, 1); // Posiciona el cursor nuevamente
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	89 e0       	ldi	r24, 0x09	; 9
 510:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_Set_Cursor>
		LCD_Write_String("Counter:"); // Muestra el valor o el error
 514:	87 e1       	ldi	r24, 0x17	; 23
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	88 ef       	ldi	r24, 0xF8	; 248
 520:	95 e1       	ldi	r25, 0x15	; 21
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x82>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x8c>
 52c:	00 00       	nop
 52e:	c2 cf       	rjmp	.-124    	; 0x4b4 <main+0x14>

00000530 <__udivmodsi4>:
 530:	a1 e2       	ldi	r26, 0x21	; 33
 532:	1a 2e       	mov	r1, r26
 534:	aa 1b       	sub	r26, r26
 536:	bb 1b       	sub	r27, r27
 538:	fd 01       	movw	r30, r26
 53a:	0d c0       	rjmp	.+26     	; 0x556 <__udivmodsi4_ep>

0000053c <__udivmodsi4_loop>:
 53c:	aa 1f       	adc	r26, r26
 53e:	bb 1f       	adc	r27, r27
 540:	ee 1f       	adc	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	a2 17       	cp	r26, r18
 546:	b3 07       	cpc	r27, r19
 548:	e4 07       	cpc	r30, r20
 54a:	f5 07       	cpc	r31, r21
 54c:	20 f0       	brcs	.+8      	; 0x556 <__udivmodsi4_ep>
 54e:	a2 1b       	sub	r26, r18
 550:	b3 0b       	sbc	r27, r19
 552:	e4 0b       	sbc	r30, r20
 554:	f5 0b       	sbc	r31, r21

00000556 <__udivmodsi4_ep>:
 556:	66 1f       	adc	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	88 1f       	adc	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	1a 94       	dec	r1
 560:	69 f7       	brne	.-38     	; 0x53c <__udivmodsi4_loop>
 562:	60 95       	com	r22
 564:	70 95       	com	r23
 566:	80 95       	com	r24
 568:	90 95       	com	r25
 56a:	9b 01       	movw	r18, r22
 56c:	ac 01       	movw	r20, r24
 56e:	bd 01       	movw	r22, r26
 570:	cf 01       	movw	r24, r30
 572:	08 95       	ret

00000574 <snprintf>:
 574:	ae e0       	ldi	r26, 0x0E	; 14
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	e0 ec       	ldi	r30, 0xC0	; 192
 57a:	f2 e0       	ldi	r31, 0x02	; 2
 57c:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__prologue_saves__+0x1c>
 580:	0d 89       	ldd	r16, Y+21	; 0x15
 582:	1e 89       	ldd	r17, Y+22	; 0x16
 584:	8f 89       	ldd	r24, Y+23	; 0x17
 586:	98 8d       	ldd	r25, Y+24	; 0x18
 588:	26 e0       	ldi	r18, 0x06	; 6
 58a:	2c 83       	std	Y+4, r18	; 0x04
 58c:	1a 83       	std	Y+2, r17	; 0x02
 58e:	09 83       	std	Y+1, r16	; 0x01
 590:	97 ff       	sbrs	r25, 7
 592:	02 c0       	rjmp	.+4      	; 0x598 <snprintf+0x24>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e8       	ldi	r25, 0x80	; 128
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	9e 83       	std	Y+6, r25	; 0x06
 59c:	8d 83       	std	Y+5, r24	; 0x05
 59e:	ae 01       	movw	r20, r28
 5a0:	45 5e       	subi	r20, 0xE5	; 229
 5a2:	5f 4f       	sbci	r21, 0xFF	; 255
 5a4:	69 8d       	ldd	r22, Y+25	; 0x19
 5a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vfprintf>
 5b0:	4d 81       	ldd	r20, Y+5	; 0x05
 5b2:	5e 81       	ldd	r21, Y+6	; 0x06
 5b4:	57 fd       	sbrc	r21, 7
 5b6:	0a c0       	rjmp	.+20     	; 0x5cc <snprintf+0x58>
 5b8:	2f 81       	ldd	r18, Y+7	; 0x07
 5ba:	38 85       	ldd	r19, Y+8	; 0x08
 5bc:	42 17       	cp	r20, r18
 5be:	53 07       	cpc	r21, r19
 5c0:	0c f4       	brge	.+2      	; 0x5c4 <snprintf+0x50>
 5c2:	9a 01       	movw	r18, r20
 5c4:	f8 01       	movw	r30, r16
 5c6:	e2 0f       	add	r30, r18
 5c8:	f3 1f       	adc	r31, r19
 5ca:	10 82       	st	Z, r1
 5cc:	2e 96       	adiw	r28, 0x0e	; 14
 5ce:	e4 e0       	ldi	r30, 0x04	; 4
 5d0:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__epilogue_restores__+0x1c>

000005d4 <vfprintf>:
 5d4:	ab e0       	ldi	r26, 0x0B	; 11
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	e0 ef       	ldi	r30, 0xF0	; 240
 5da:	f2 e0       	ldi	r31, 0x02	; 2
 5dc:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__prologue_saves__>
 5e0:	6c 01       	movw	r12, r24
 5e2:	7b 01       	movw	r14, r22
 5e4:	8a 01       	movw	r16, r20
 5e6:	fc 01       	movw	r30, r24
 5e8:	17 82       	std	Z+7, r1	; 0x07
 5ea:	16 82       	std	Z+6, r1	; 0x06
 5ec:	83 81       	ldd	r24, Z+3	; 0x03
 5ee:	81 ff       	sbrs	r24, 1
 5f0:	cc c1       	rjmp	.+920    	; 0x98a <__stack+0x8b>
 5f2:	ce 01       	movw	r24, r28
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	3c 01       	movw	r6, r24
 5f8:	f6 01       	movw	r30, r12
 5fa:	93 81       	ldd	r25, Z+3	; 0x03
 5fc:	f7 01       	movw	r30, r14
 5fe:	93 fd       	sbrc	r25, 3
 600:	85 91       	lpm	r24, Z+
 602:	93 ff       	sbrs	r25, 3
 604:	81 91       	ld	r24, Z+
 606:	7f 01       	movw	r14, r30
 608:	88 23       	and	r24, r24
 60a:	09 f4       	brne	.+2      	; 0x60e <vfprintf+0x3a>
 60c:	ba c1       	rjmp	.+884    	; 0x982 <__stack+0x83>
 60e:	85 32       	cpi	r24, 0x25	; 37
 610:	39 f4       	brne	.+14     	; 0x620 <vfprintf+0x4c>
 612:	93 fd       	sbrc	r25, 3
 614:	85 91       	lpm	r24, Z+
 616:	93 ff       	sbrs	r25, 3
 618:	81 91       	ld	r24, Z+
 61a:	7f 01       	movw	r14, r30
 61c:	85 32       	cpi	r24, 0x25	; 37
 61e:	29 f4       	brne	.+10     	; 0x62a <vfprintf+0x56>
 620:	b6 01       	movw	r22, r12
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 628:	e7 cf       	rjmp	.-50     	; 0x5f8 <vfprintf+0x24>
 62a:	91 2c       	mov	r9, r1
 62c:	21 2c       	mov	r2, r1
 62e:	31 2c       	mov	r3, r1
 630:	ff e1       	ldi	r31, 0x1F	; 31
 632:	f3 15       	cp	r31, r3
 634:	d8 f0       	brcs	.+54     	; 0x66c <vfprintf+0x98>
 636:	8b 32       	cpi	r24, 0x2B	; 43
 638:	79 f0       	breq	.+30     	; 0x658 <vfprintf+0x84>
 63a:	38 f4       	brcc	.+14     	; 0x64a <vfprintf+0x76>
 63c:	80 32       	cpi	r24, 0x20	; 32
 63e:	79 f0       	breq	.+30     	; 0x65e <vfprintf+0x8a>
 640:	83 32       	cpi	r24, 0x23	; 35
 642:	a1 f4       	brne	.+40     	; 0x66c <vfprintf+0x98>
 644:	23 2d       	mov	r18, r3
 646:	20 61       	ori	r18, 0x10	; 16
 648:	1d c0       	rjmp	.+58     	; 0x684 <vfprintf+0xb0>
 64a:	8d 32       	cpi	r24, 0x2D	; 45
 64c:	61 f0       	breq	.+24     	; 0x666 <vfprintf+0x92>
 64e:	80 33       	cpi	r24, 0x30	; 48
 650:	69 f4       	brne	.+26     	; 0x66c <vfprintf+0x98>
 652:	23 2d       	mov	r18, r3
 654:	21 60       	ori	r18, 0x01	; 1
 656:	16 c0       	rjmp	.+44     	; 0x684 <vfprintf+0xb0>
 658:	83 2d       	mov	r24, r3
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	38 2e       	mov	r3, r24
 65e:	e3 2d       	mov	r30, r3
 660:	e4 60       	ori	r30, 0x04	; 4
 662:	3e 2e       	mov	r3, r30
 664:	2a c0       	rjmp	.+84     	; 0x6ba <vfprintf+0xe6>
 666:	f3 2d       	mov	r31, r3
 668:	f8 60       	ori	r31, 0x08	; 8
 66a:	1d c0       	rjmp	.+58     	; 0x6a6 <vfprintf+0xd2>
 66c:	37 fc       	sbrc	r3, 7
 66e:	2d c0       	rjmp	.+90     	; 0x6ca <vfprintf+0xf6>
 670:	20 ed       	ldi	r18, 0xD0	; 208
 672:	28 0f       	add	r18, r24
 674:	2a 30       	cpi	r18, 0x0A	; 10
 676:	40 f0       	brcs	.+16     	; 0x688 <vfprintf+0xb4>
 678:	8e 32       	cpi	r24, 0x2E	; 46
 67a:	b9 f4       	brne	.+46     	; 0x6aa <vfprintf+0xd6>
 67c:	36 fc       	sbrc	r3, 6
 67e:	81 c1       	rjmp	.+770    	; 0x982 <__stack+0x83>
 680:	23 2d       	mov	r18, r3
 682:	20 64       	ori	r18, 0x40	; 64
 684:	32 2e       	mov	r3, r18
 686:	19 c0       	rjmp	.+50     	; 0x6ba <vfprintf+0xe6>
 688:	36 fe       	sbrs	r3, 6
 68a:	06 c0       	rjmp	.+12     	; 0x698 <vfprintf+0xc4>
 68c:	8a e0       	ldi	r24, 0x0A	; 10
 68e:	98 9e       	mul	r9, r24
 690:	20 0d       	add	r18, r0
 692:	11 24       	eor	r1, r1
 694:	92 2e       	mov	r9, r18
 696:	11 c0       	rjmp	.+34     	; 0x6ba <vfprintf+0xe6>
 698:	ea e0       	ldi	r30, 0x0A	; 10
 69a:	2e 9e       	mul	r2, r30
 69c:	20 0d       	add	r18, r0
 69e:	11 24       	eor	r1, r1
 6a0:	22 2e       	mov	r2, r18
 6a2:	f3 2d       	mov	r31, r3
 6a4:	f0 62       	ori	r31, 0x20	; 32
 6a6:	3f 2e       	mov	r3, r31
 6a8:	08 c0       	rjmp	.+16     	; 0x6ba <vfprintf+0xe6>
 6aa:	8c 36       	cpi	r24, 0x6C	; 108
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <vfprintf+0xe2>
 6ae:	83 2d       	mov	r24, r3
 6b0:	80 68       	ori	r24, 0x80	; 128
 6b2:	38 2e       	mov	r3, r24
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <vfprintf+0xe6>
 6b6:	88 36       	cpi	r24, 0x68	; 104
 6b8:	41 f4       	brne	.+16     	; 0x6ca <vfprintf+0xf6>
 6ba:	f7 01       	movw	r30, r14
 6bc:	93 fd       	sbrc	r25, 3
 6be:	85 91       	lpm	r24, Z+
 6c0:	93 ff       	sbrs	r25, 3
 6c2:	81 91       	ld	r24, Z+
 6c4:	7f 01       	movw	r14, r30
 6c6:	81 11       	cpse	r24, r1
 6c8:	b3 cf       	rjmp	.-154    	; 0x630 <vfprintf+0x5c>
 6ca:	98 2f       	mov	r25, r24
 6cc:	9f 7d       	andi	r25, 0xDF	; 223
 6ce:	95 54       	subi	r25, 0x45	; 69
 6d0:	93 30       	cpi	r25, 0x03	; 3
 6d2:	28 f4       	brcc	.+10     	; 0x6de <vfprintf+0x10a>
 6d4:	0c 5f       	subi	r16, 0xFC	; 252
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	9f e3       	ldi	r25, 0x3F	; 63
 6da:	99 83       	std	Y+1, r25	; 0x01
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <vfprintf+0x124>
 6de:	83 36       	cpi	r24, 0x63	; 99
 6e0:	31 f0       	breq	.+12     	; 0x6ee <vfprintf+0x11a>
 6e2:	83 37       	cpi	r24, 0x73	; 115
 6e4:	71 f0       	breq	.+28     	; 0x702 <vfprintf+0x12e>
 6e6:	83 35       	cpi	r24, 0x53	; 83
 6e8:	09 f0       	breq	.+2      	; 0x6ec <vfprintf+0x118>
 6ea:	59 c0       	rjmp	.+178    	; 0x79e <vfprintf+0x1ca>
 6ec:	21 c0       	rjmp	.+66     	; 0x730 <vfprintf+0x15c>
 6ee:	f8 01       	movw	r30, r16
 6f0:	80 81       	ld	r24, Z
 6f2:	89 83       	std	Y+1, r24	; 0x01
 6f4:	0e 5f       	subi	r16, 0xFE	; 254
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	88 24       	eor	r8, r8
 6fa:	83 94       	inc	r8
 6fc:	91 2c       	mov	r9, r1
 6fe:	53 01       	movw	r10, r6
 700:	13 c0       	rjmp	.+38     	; 0x728 <vfprintf+0x154>
 702:	28 01       	movw	r4, r16
 704:	f2 e0       	ldi	r31, 0x02	; 2
 706:	4f 0e       	add	r4, r31
 708:	51 1c       	adc	r5, r1
 70a:	f8 01       	movw	r30, r16
 70c:	a0 80       	ld	r10, Z
 70e:	b1 80       	ldd	r11, Z+1	; 0x01
 710:	36 fe       	sbrs	r3, 6
 712:	03 c0       	rjmp	.+6      	; 0x71a <vfprintf+0x146>
 714:	69 2d       	mov	r22, r9
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <vfprintf+0x14a>
 71a:	6f ef       	ldi	r22, 0xFF	; 255
 71c:	7f ef       	ldi	r23, 0xFF	; 255
 71e:	c5 01       	movw	r24, r10
 720:	0e 94 d6 04 	call	0x9ac	; 0x9ac <strnlen>
 724:	4c 01       	movw	r8, r24
 726:	82 01       	movw	r16, r4
 728:	f3 2d       	mov	r31, r3
 72a:	ff 77       	andi	r31, 0x7F	; 127
 72c:	3f 2e       	mov	r3, r31
 72e:	16 c0       	rjmp	.+44     	; 0x75c <vfprintf+0x188>
 730:	28 01       	movw	r4, r16
 732:	22 e0       	ldi	r18, 0x02	; 2
 734:	42 0e       	add	r4, r18
 736:	51 1c       	adc	r5, r1
 738:	f8 01       	movw	r30, r16
 73a:	a0 80       	ld	r10, Z
 73c:	b1 80       	ldd	r11, Z+1	; 0x01
 73e:	36 fe       	sbrs	r3, 6
 740:	03 c0       	rjmp	.+6      	; 0x748 <vfprintf+0x174>
 742:	69 2d       	mov	r22, r9
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <vfprintf+0x178>
 748:	6f ef       	ldi	r22, 0xFF	; 255
 74a:	7f ef       	ldi	r23, 0xFF	; 255
 74c:	c5 01       	movw	r24, r10
 74e:	0e 94 cb 04 	call	0x996	; 0x996 <strnlen_P>
 752:	4c 01       	movw	r8, r24
 754:	f3 2d       	mov	r31, r3
 756:	f0 68       	ori	r31, 0x80	; 128
 758:	3f 2e       	mov	r3, r31
 75a:	82 01       	movw	r16, r4
 75c:	33 fc       	sbrc	r3, 3
 75e:	1b c0       	rjmp	.+54     	; 0x796 <vfprintf+0x1c2>
 760:	82 2d       	mov	r24, r2
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	88 16       	cp	r8, r24
 766:	99 06       	cpc	r9, r25
 768:	b0 f4       	brcc	.+44     	; 0x796 <vfprintf+0x1c2>
 76a:	b6 01       	movw	r22, r12
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 774:	2a 94       	dec	r2
 776:	f4 cf       	rjmp	.-24     	; 0x760 <vfprintf+0x18c>
 778:	f5 01       	movw	r30, r10
 77a:	37 fc       	sbrc	r3, 7
 77c:	85 91       	lpm	r24, Z+
 77e:	37 fe       	sbrs	r3, 7
 780:	81 91       	ld	r24, Z+
 782:	5f 01       	movw	r10, r30
 784:	b6 01       	movw	r22, r12
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 78c:	21 10       	cpse	r2, r1
 78e:	2a 94       	dec	r2
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	82 1a       	sub	r8, r18
 794:	91 08       	sbc	r9, r1
 796:	81 14       	cp	r8, r1
 798:	91 04       	cpc	r9, r1
 79a:	71 f7       	brne	.-36     	; 0x778 <vfprintf+0x1a4>
 79c:	e8 c0       	rjmp	.+464    	; 0x96e <__stack+0x6f>
 79e:	84 36       	cpi	r24, 0x64	; 100
 7a0:	11 f0       	breq	.+4      	; 0x7a6 <vfprintf+0x1d2>
 7a2:	89 36       	cpi	r24, 0x69	; 105
 7a4:	41 f5       	brne	.+80     	; 0x7f6 <vfprintf+0x222>
 7a6:	f8 01       	movw	r30, r16
 7a8:	37 fe       	sbrs	r3, 7
 7aa:	07 c0       	rjmp	.+14     	; 0x7ba <vfprintf+0x1e6>
 7ac:	60 81       	ld	r22, Z
 7ae:	71 81       	ldd	r23, Z+1	; 0x01
 7b0:	82 81       	ldd	r24, Z+2	; 0x02
 7b2:	93 81       	ldd	r25, Z+3	; 0x03
 7b4:	0c 5f       	subi	r16, 0xFC	; 252
 7b6:	1f 4f       	sbci	r17, 0xFF	; 255
 7b8:	08 c0       	rjmp	.+16     	; 0x7ca <vfprintf+0x1f6>
 7ba:	60 81       	ld	r22, Z
 7bc:	71 81       	ldd	r23, Z+1	; 0x01
 7be:	07 2e       	mov	r0, r23
 7c0:	00 0c       	add	r0, r0
 7c2:	88 0b       	sbc	r24, r24
 7c4:	99 0b       	sbc	r25, r25
 7c6:	0e 5f       	subi	r16, 0xFE	; 254
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	f3 2d       	mov	r31, r3
 7cc:	ff 76       	andi	r31, 0x6F	; 111
 7ce:	3f 2e       	mov	r3, r31
 7d0:	97 ff       	sbrs	r25, 7
 7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <vfprintf+0x212>
 7d4:	90 95       	com	r25
 7d6:	80 95       	com	r24
 7d8:	70 95       	com	r23
 7da:	61 95       	neg	r22
 7dc:	7f 4f       	sbci	r23, 0xFF	; 255
 7de:	8f 4f       	sbci	r24, 0xFF	; 255
 7e0:	9f 4f       	sbci	r25, 0xFF	; 255
 7e2:	f0 68       	ori	r31, 0x80	; 128
 7e4:	3f 2e       	mov	r3, r31
 7e6:	2a e0       	ldi	r18, 0x0A	; 10
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	a3 01       	movw	r20, r6
 7ec:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__ultoa_invert>
 7f0:	88 2e       	mov	r8, r24
 7f2:	86 18       	sub	r8, r6
 7f4:	45 c0       	rjmp	.+138    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 7f6:	85 37       	cpi	r24, 0x75	; 117
 7f8:	31 f4       	brne	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	23 2d       	mov	r18, r3
 7fc:	2f 7e       	andi	r18, 0xEF	; 239
 7fe:	b2 2e       	mov	r11, r18
 800:	2a e0       	ldi	r18, 0x0A	; 10
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	25 c0       	rjmp	.+74     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 806:	93 2d       	mov	r25, r3
 808:	99 7f       	andi	r25, 0xF9	; 249
 80a:	b9 2e       	mov	r11, r25
 80c:	8f 36       	cpi	r24, 0x6F	; 111
 80e:	c1 f0       	breq	.+48     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 810:	18 f4       	brcc	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 812:	88 35       	cpi	r24, 0x58	; 88
 814:	79 f0       	breq	.+30     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 816:	b5 c0       	rjmp	.+362    	; 0x982 <__stack+0x83>
 818:	80 37       	cpi	r24, 0x70	; 112
 81a:	19 f0       	breq	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81c:	88 37       	cpi	r24, 0x78	; 120
 81e:	21 f0       	breq	.+8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 820:	b0 c0       	rjmp	.+352    	; 0x982 <__stack+0x83>
 822:	e9 2f       	mov	r30, r25
 824:	e0 61       	ori	r30, 0x10	; 16
 826:	be 2e       	mov	r11, r30
 828:	b4 fe       	sbrs	r11, 4
 82a:	0d c0       	rjmp	.+26     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 82c:	fb 2d       	mov	r31, r11
 82e:	f4 60       	ori	r31, 0x04	; 4
 830:	bf 2e       	mov	r11, r31
 832:	09 c0       	rjmp	.+18     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 834:	34 fe       	sbrs	r3, 4
 836:	0a c0       	rjmp	.+20     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 838:	29 2f       	mov	r18, r25
 83a:	26 60       	ori	r18, 0x06	; 6
 83c:	b2 2e       	mov	r11, r18
 83e:	06 c0       	rjmp	.+12     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 840:	28 e0       	ldi	r18, 0x08	; 8
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	05 c0       	rjmp	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 846:	20 e1       	ldi	r18, 0x10	; 16
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84c:	20 e1       	ldi	r18, 0x10	; 16
 84e:	32 e0       	ldi	r19, 0x02	; 2
 850:	f8 01       	movw	r30, r16
 852:	b7 fe       	sbrs	r11, 7
 854:	07 c0       	rjmp	.+14     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	82 81       	ldd	r24, Z+2	; 0x02
 85c:	93 81       	ldd	r25, Z+3	; 0x03
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	06 c0       	rjmp	.+12     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 5f       	subi	r16, 0xFE	; 254
 86e:	1f 4f       	sbci	r17, 0xFF	; 255
 870:	a3 01       	movw	r20, r6
 872:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__ultoa_invert>
 876:	88 2e       	mov	r8, r24
 878:	86 18       	sub	r8, r6
 87a:	fb 2d       	mov	r31, r11
 87c:	ff 77       	andi	r31, 0x7F	; 127
 87e:	3f 2e       	mov	r3, r31
 880:	36 fe       	sbrs	r3, 6
 882:	0d c0       	rjmp	.+26     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 884:	23 2d       	mov	r18, r3
 886:	2e 7f       	andi	r18, 0xFE	; 254
 888:	a2 2e       	mov	r10, r18
 88a:	89 14       	cp	r8, r9
 88c:	58 f4       	brcc	.+22     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 88e:	34 fe       	sbrs	r3, 4
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 892:	32 fc       	sbrc	r3, 2
 894:	09 c0       	rjmp	.+18     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 896:	83 2d       	mov	r24, r3
 898:	8e 7e       	andi	r24, 0xEE	; 238
 89a:	a8 2e       	mov	r10, r24
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 89e:	b8 2c       	mov	r11, r8
 8a0:	a3 2c       	mov	r10, r3
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a4:	b8 2c       	mov	r11, r8
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a8:	b9 2c       	mov	r11, r9
 8aa:	a4 fe       	sbrs	r10, 4
 8ac:	0f c0       	rjmp	.+30     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
 8ae:	fe 01       	movw	r30, r28
 8b0:	e8 0d       	add	r30, r8
 8b2:	f1 1d       	adc	r31, r1
 8b4:	80 81       	ld	r24, Z
 8b6:	80 33       	cpi	r24, 0x30	; 48
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8ba:	9a 2d       	mov	r25, r10
 8bc:	99 7e       	andi	r25, 0xE9	; 233
 8be:	a9 2e       	mov	r10, r25
 8c0:	09 c0       	rjmp	.+18     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8c2:	a2 fe       	sbrs	r10, 2
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c6:	b3 94       	inc	r11
 8c8:	b3 94       	inc	r11
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8cc:	8a 2d       	mov	r24, r10
 8ce:	86 78       	andi	r24, 0x86	; 134
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8d2:	b3 94       	inc	r11
 8d4:	a3 fc       	sbrc	r10, 3
 8d6:	11 c0       	rjmp	.+34     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8d8:	a0 fe       	sbrs	r10, 0
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8dc:	b2 14       	cp	r11, r2
 8de:	88 f4       	brcc	.+34     	; 0x902 <__stack+0x3>
 8e0:	28 0c       	add	r2, r8
 8e2:	92 2c       	mov	r9, r2
 8e4:	9b 18       	sub	r9, r11
 8e6:	0e c0       	rjmp	.+28     	; 0x904 <__stack+0x5>
 8e8:	b2 14       	cp	r11, r2
 8ea:	60 f4       	brcc	.+24     	; 0x904 <__stack+0x5>
 8ec:	b6 01       	movw	r22, r12
 8ee:	80 e2       	ldi	r24, 0x20	; 32
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 8f6:	b3 94       	inc	r11
 8f8:	f7 cf       	rjmp	.-18     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8fa:	b2 14       	cp	r11, r2
 8fc:	18 f4       	brcc	.+6      	; 0x904 <__stack+0x5>
 8fe:	2b 18       	sub	r2, r11
 900:	02 c0       	rjmp	.+4      	; 0x906 <__stack+0x7>
 902:	98 2c       	mov	r9, r8
 904:	21 2c       	mov	r2, r1
 906:	a4 fe       	sbrs	r10, 4
 908:	10 c0       	rjmp	.+32     	; 0x92a <__stack+0x2b>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e3       	ldi	r24, 0x30	; 48
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 914:	a2 fe       	sbrs	r10, 2
 916:	17 c0       	rjmp	.+46     	; 0x946 <__stack+0x47>
 918:	a1 fc       	sbrc	r10, 1
 91a:	03 c0       	rjmp	.+6      	; 0x922 <__stack+0x23>
 91c:	88 e7       	ldi	r24, 0x78	; 120
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0x27>
 922:	88 e5       	ldi	r24, 0x58	; 88
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	b6 01       	movw	r22, r12
 928:	0c c0       	rjmp	.+24     	; 0x942 <__stack+0x43>
 92a:	8a 2d       	mov	r24, r10
 92c:	86 78       	andi	r24, 0x86	; 134
 92e:	59 f0       	breq	.+22     	; 0x946 <__stack+0x47>
 930:	a1 fe       	sbrs	r10, 1
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
 934:	8b e2       	ldi	r24, 0x2B	; 43
 936:	01 c0       	rjmp	.+2      	; 0x93a <__stack+0x3b>
 938:	80 e2       	ldi	r24, 0x20	; 32
 93a:	a7 fc       	sbrc	r10, 7
 93c:	8d e2       	ldi	r24, 0x2D	; 45
 93e:	b6 01       	movw	r22, r12
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 946:	89 14       	cp	r8, r9
 948:	38 f4       	brcc	.+14     	; 0x958 <__stack+0x59>
 94a:	b6 01       	movw	r22, r12
 94c:	80 e3       	ldi	r24, 0x30	; 48
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 954:	9a 94       	dec	r9
 956:	f7 cf       	rjmp	.-18     	; 0x946 <__stack+0x47>
 958:	8a 94       	dec	r8
 95a:	f3 01       	movw	r30, r6
 95c:	e8 0d       	add	r30, r8
 95e:	f1 1d       	adc	r31, r1
 960:	80 81       	ld	r24, Z
 962:	b6 01       	movw	r22, r12
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 96a:	81 10       	cpse	r8, r1
 96c:	f5 cf       	rjmp	.-22     	; 0x958 <__stack+0x59>
 96e:	22 20       	and	r2, r2
 970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x75>
 972:	42 ce       	rjmp	.-892    	; 0x5f8 <vfprintf+0x24>
 974:	b6 01       	movw	r22, r12
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fputc>
 97e:	2a 94       	dec	r2
 980:	f6 cf       	rjmp	.-20     	; 0x96e <__stack+0x6f>
 982:	f6 01       	movw	r30, r12
 984:	86 81       	ldd	r24, Z+6	; 0x06
 986:	97 81       	ldd	r25, Z+7	; 0x07
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f ef       	ldi	r25, 0xFF	; 255
 98e:	2b 96       	adiw	r28, 0x0b	; 11
 990:	e2 e1       	ldi	r30, 0x12	; 18
 992:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__epilogue_restores__>

00000996 <strnlen_P>:
 996:	fc 01       	movw	r30, r24
 998:	05 90       	lpm	r0, Z+
 99a:	61 50       	subi	r22, 0x01	; 1
 99c:	70 40       	sbci	r23, 0x00	; 0
 99e:	01 10       	cpse	r0, r1
 9a0:	d8 f7       	brcc	.-10     	; 0x998 <strnlen_P+0x2>
 9a2:	80 95       	com	r24
 9a4:	90 95       	com	r25
 9a6:	8e 0f       	add	r24, r30
 9a8:	9f 1f       	adc	r25, r31
 9aa:	08 95       	ret

000009ac <strnlen>:
 9ac:	fc 01       	movw	r30, r24
 9ae:	61 50       	subi	r22, 0x01	; 1
 9b0:	70 40       	sbci	r23, 0x00	; 0
 9b2:	01 90       	ld	r0, Z+
 9b4:	01 10       	cpse	r0, r1
 9b6:	d8 f7       	brcc	.-10     	; 0x9ae <strnlen+0x2>
 9b8:	80 95       	com	r24
 9ba:	90 95       	com	r25
 9bc:	8e 0f       	add	r24, r30
 9be:	9f 1f       	adc	r25, r31
 9c0:	08 95       	ret

000009c2 <fputc>:
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	fb 01       	movw	r30, r22
 9cc:	23 81       	ldd	r18, Z+3	; 0x03
 9ce:	21 fd       	sbrc	r18, 1
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <fputc+0x16>
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	9f ef       	ldi	r25, 0xFF	; 255
 9d6:	2c c0       	rjmp	.+88     	; 0xa30 <fputc+0x6e>
 9d8:	22 ff       	sbrs	r18, 2
 9da:	16 c0       	rjmp	.+44     	; 0xa08 <fputc+0x46>
 9dc:	46 81       	ldd	r20, Z+6	; 0x06
 9de:	57 81       	ldd	r21, Z+7	; 0x07
 9e0:	24 81       	ldd	r18, Z+4	; 0x04
 9e2:	35 81       	ldd	r19, Z+5	; 0x05
 9e4:	42 17       	cp	r20, r18
 9e6:	53 07       	cpc	r21, r19
 9e8:	44 f4       	brge	.+16     	; 0x9fa <fputc+0x38>
 9ea:	a0 81       	ld	r26, Z
 9ec:	b1 81       	ldd	r27, Z+1	; 0x01
 9ee:	9d 01       	movw	r18, r26
 9f0:	2f 5f       	subi	r18, 0xFF	; 255
 9f2:	3f 4f       	sbci	r19, 0xFF	; 255
 9f4:	31 83       	std	Z+1, r19	; 0x01
 9f6:	20 83       	st	Z, r18
 9f8:	8c 93       	st	X, r24
 9fa:	26 81       	ldd	r18, Z+6	; 0x06
 9fc:	37 81       	ldd	r19, Z+7	; 0x07
 9fe:	2f 5f       	subi	r18, 0xFF	; 255
 a00:	3f 4f       	sbci	r19, 0xFF	; 255
 a02:	37 83       	std	Z+7, r19	; 0x07
 a04:	26 83       	std	Z+6, r18	; 0x06
 a06:	14 c0       	rjmp	.+40     	; 0xa30 <fputc+0x6e>
 a08:	8b 01       	movw	r16, r22
 a0a:	ec 01       	movw	r28, r24
 a0c:	fb 01       	movw	r30, r22
 a0e:	00 84       	ldd	r0, Z+8	; 0x08
 a10:	f1 85       	ldd	r31, Z+9	; 0x09
 a12:	e0 2d       	mov	r30, r0
 a14:	09 95       	icall
 a16:	89 2b       	or	r24, r25
 a18:	e1 f6       	brne	.-72     	; 0x9d2 <fputc+0x10>
 a1a:	d8 01       	movw	r26, r16
 a1c:	16 96       	adiw	r26, 0x06	; 6
 a1e:	8d 91       	ld	r24, X+
 a20:	9c 91       	ld	r25, X
 a22:	17 97       	sbiw	r26, 0x07	; 7
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	17 96       	adiw	r26, 0x07	; 7
 a28:	9c 93       	st	X, r25
 a2a:	8e 93       	st	-X, r24
 a2c:	16 97       	sbiw	r26, 0x06	; 6
 a2e:	ce 01       	movw	r24, r28
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	1f 91       	pop	r17
 a36:	0f 91       	pop	r16
 a38:	08 95       	ret

00000a3a <__ultoa_invert>:
 a3a:	fa 01       	movw	r30, r20
 a3c:	aa 27       	eor	r26, r26
 a3e:	28 30       	cpi	r18, 0x08	; 8
 a40:	51 f1       	breq	.+84     	; 0xa96 <__ultoa_invert+0x5c>
 a42:	20 31       	cpi	r18, 0x10	; 16
 a44:	81 f1       	breq	.+96     	; 0xaa6 <__ultoa_invert+0x6c>
 a46:	e8 94       	clt
 a48:	6f 93       	push	r22
 a4a:	6e 7f       	andi	r22, 0xFE	; 254
 a4c:	6e 5f       	subi	r22, 0xFE	; 254
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	af 4f       	sbci	r26, 0xFF	; 255
 a56:	b1 e0       	ldi	r27, 0x01	; 1
 a58:	3e d0       	rcall	.+124    	; 0xad6 <__ultoa_invert+0x9c>
 a5a:	b4 e0       	ldi	r27, 0x04	; 4
 a5c:	3c d0       	rcall	.+120    	; 0xad6 <__ultoa_invert+0x9c>
 a5e:	67 0f       	add	r22, r23
 a60:	78 1f       	adc	r23, r24
 a62:	89 1f       	adc	r24, r25
 a64:	9a 1f       	adc	r25, r26
 a66:	a1 1d       	adc	r26, r1
 a68:	68 0f       	add	r22, r24
 a6a:	79 1f       	adc	r23, r25
 a6c:	8a 1f       	adc	r24, r26
 a6e:	91 1d       	adc	r25, r1
 a70:	a1 1d       	adc	r26, r1
 a72:	6a 0f       	add	r22, r26
 a74:	71 1d       	adc	r23, r1
 a76:	81 1d       	adc	r24, r1
 a78:	91 1d       	adc	r25, r1
 a7a:	a1 1d       	adc	r26, r1
 a7c:	20 d0       	rcall	.+64     	; 0xabe <__ultoa_invert+0x84>
 a7e:	09 f4       	brne	.+2      	; 0xa82 <__ultoa_invert+0x48>
 a80:	68 94       	set
 a82:	3f 91       	pop	r19
 a84:	2a e0       	ldi	r18, 0x0A	; 10
 a86:	26 9f       	mul	r18, r22
 a88:	11 24       	eor	r1, r1
 a8a:	30 19       	sub	r19, r0
 a8c:	30 5d       	subi	r19, 0xD0	; 208
 a8e:	31 93       	st	Z+, r19
 a90:	de f6       	brtc	.-74     	; 0xa48 <__ultoa_invert+0xe>
 a92:	cf 01       	movw	r24, r30
 a94:	08 95       	ret
 a96:	46 2f       	mov	r20, r22
 a98:	47 70       	andi	r20, 0x07	; 7
 a9a:	40 5d       	subi	r20, 0xD0	; 208
 a9c:	41 93       	st	Z+, r20
 a9e:	b3 e0       	ldi	r27, 0x03	; 3
 aa0:	0f d0       	rcall	.+30     	; 0xac0 <__ultoa_invert+0x86>
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__ultoa_invert+0x5c>
 aa4:	f6 cf       	rjmp	.-20     	; 0xa92 <__ultoa_invert+0x58>
 aa6:	46 2f       	mov	r20, r22
 aa8:	4f 70       	andi	r20, 0x0F	; 15
 aaa:	40 5d       	subi	r20, 0xD0	; 208
 aac:	4a 33       	cpi	r20, 0x3A	; 58
 aae:	18 f0       	brcs	.+6      	; 0xab6 <__ultoa_invert+0x7c>
 ab0:	49 5d       	subi	r20, 0xD9	; 217
 ab2:	31 fd       	sbrc	r19, 1
 ab4:	40 52       	subi	r20, 0x20	; 32
 ab6:	41 93       	st	Z+, r20
 ab8:	02 d0       	rcall	.+4      	; 0xabe <__ultoa_invert+0x84>
 aba:	a9 f7       	brne	.-22     	; 0xaa6 <__ultoa_invert+0x6c>
 abc:	ea cf       	rjmp	.-44     	; 0xa92 <__ultoa_invert+0x58>
 abe:	b4 e0       	ldi	r27, 0x04	; 4
 ac0:	a6 95       	lsr	r26
 ac2:	97 95       	ror	r25
 ac4:	87 95       	ror	r24
 ac6:	77 95       	ror	r23
 ac8:	67 95       	ror	r22
 aca:	ba 95       	dec	r27
 acc:	c9 f7       	brne	.-14     	; 0xac0 <__ultoa_invert+0x86>
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	61 05       	cpc	r22, r1
 ad2:	71 05       	cpc	r23, r1
 ad4:	08 95       	ret
 ad6:	9b 01       	movw	r18, r22
 ad8:	ac 01       	movw	r20, r24
 ada:	0a 2e       	mov	r0, r26
 adc:	06 94       	lsr	r0
 ade:	57 95       	ror	r21
 ae0:	47 95       	ror	r20
 ae2:	37 95       	ror	r19
 ae4:	27 95       	ror	r18
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0xa2>
 aea:	62 0f       	add	r22, r18
 aec:	73 1f       	adc	r23, r19
 aee:	84 1f       	adc	r24, r20
 af0:	95 1f       	adc	r25, r21
 af2:	a0 1d       	adc	r26, r0
 af4:	08 95       	ret

00000af6 <__prologue_saves__>:
 af6:	2f 92       	push	r2
 af8:	3f 92       	push	r3
 afa:	4f 92       	push	r4
 afc:	5f 92       	push	r5
 afe:	6f 92       	push	r6
 b00:	7f 92       	push	r7
 b02:	8f 92       	push	r8
 b04:	9f 92       	push	r9
 b06:	af 92       	push	r10
 b08:	bf 92       	push	r11
 b0a:	cf 92       	push	r12
 b0c:	df 92       	push	r13
 b0e:	ef 92       	push	r14
 b10:	ff 92       	push	r15
 b12:	0f 93       	push	r16
 b14:	1f 93       	push	r17
 b16:	cf 93       	push	r28
 b18:	df 93       	push	r29
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
 b1e:	ca 1b       	sub	r28, r26
 b20:	db 0b       	sbc	r29, r27
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	f8 94       	cli
 b26:	de bf       	out	0x3e, r29	; 62
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	cd bf       	out	0x3d, r28	; 61
 b2c:	09 94       	ijmp

00000b2e <__epilogue_restores__>:
 b2e:	2a 88       	ldd	r2, Y+18	; 0x12
 b30:	39 88       	ldd	r3, Y+17	; 0x11
 b32:	48 88       	ldd	r4, Y+16	; 0x10
 b34:	5f 84       	ldd	r5, Y+15	; 0x0f
 b36:	6e 84       	ldd	r6, Y+14	; 0x0e
 b38:	7d 84       	ldd	r7, Y+13	; 0x0d
 b3a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b3c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b3e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b40:	b9 84       	ldd	r11, Y+9	; 0x09
 b42:	c8 84       	ldd	r12, Y+8	; 0x08
 b44:	df 80       	ldd	r13, Y+7	; 0x07
 b46:	ee 80       	ldd	r14, Y+6	; 0x06
 b48:	fd 80       	ldd	r15, Y+5	; 0x05
 b4a:	0c 81       	ldd	r16, Y+4	; 0x04
 b4c:	1b 81       	ldd	r17, Y+3	; 0x03
 b4e:	aa 81       	ldd	r26, Y+2	; 0x02
 b50:	b9 81       	ldd	r27, Y+1	; 0x01
 b52:	ce 0f       	add	r28, r30
 b54:	d1 1d       	adc	r29, r1
 b56:	0f b6       	in	r0, 0x3f	; 63
 b58:	f8 94       	cli
 b5a:	de bf       	out	0x3e, r29	; 62
 b5c:	0f be       	out	0x3f, r0	; 63
 b5e:	cd bf       	out	0x3d, r28	; 61
 b60:	ed 01       	movw	r28, r26
 b62:	08 95       	ret

00000b64 <_exit>:
 b64:	f8 94       	cli

00000b66 <__stop_program>:
 b66:	ff cf       	rjmp	.-2      	; 0xb66 <__stop_program>
