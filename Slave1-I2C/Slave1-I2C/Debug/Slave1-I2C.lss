
Slave1-I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a53  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d4  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b2  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00001bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000465  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000238  00000000  00000000  000021d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 14 01 	call	0x228	; 0x228 <main>
  88:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_init>:
	
}
void ADC7(void){
	//ADC7
	ADMUX &= ~((1<<MUX1) | (1<<MUX2) | (1<<MUX3) | (1<<MUX0));
	ADMUX |= (1<<MUX2) | (1<<MUX1) | (1<<MUX0);
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	90 64       	ori	r25, 0x40	; 64
  98:	90 83       	st	Z, r25
  9a:	90 81       	ld	r25, Z
  9c:	9f 77       	andi	r25, 0x7F	; 127
  9e:	90 83       	st	Z, r25
  a0:	90 81       	ld	r25, Z
  a2:	9f 7d       	andi	r25, 0xDF	; 223
  a4:	90 83       	st	Z, r25
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	98 68       	ori	r25, 0x88	; 136
  ae:	90 83       	st	Z, r25
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	21 f4       	brne	.+8      	; 0xbc <ADC_init+0x2c>
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	31 f4       	brne	.+12     	; 0xcc <ADC_init+0x3c>
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret
  cc:	88 30       	cpi	r24, 0x08	; 8
  ce:	31 f4       	brne	.+12     	; 0xdc <ADC_init+0x4c>
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret
  dc:	80 31       	cpi	r24, 0x10	; 16
  de:	31 f4       	brne	.+12     	; 0xec <ADC_init+0x5c>
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret
  ec:	80 32       	cpi	r24, 0x20	; 32
  ee:	31 f4       	brne	.+12     	; 0xfc <ADC_init+0x6c>
  f0:	ea e7       	ldi	r30, 0x7A	; 122
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	85 60       	ori	r24, 0x05	; 5
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret
  fc:	80 38       	cpi	r24, 0x80	; 128
  fe:	31 f4       	brne	.+12     	; 0x10c <ADC_init+0x7c>
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	87 60       	ori	r24, 0x07	; 7
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	87 60       	ori	r24, 0x07	; 7
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <ADC2>:
 118:	ec e7       	ldi	r30, 0x7C	; 124
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	80 83       	st	Z, r24
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <habilitar_conversion>:
}

void habilitar_conversion(void){
	ADCSRA |= (1<<ADSC);//HABILITAR CONVERSION
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <__vector_21>:
volatile uint8_t adc_value; // Valor predeterminado para pruebas
volatile uint8_t dato = 0; // Variable global para almacenar datos recibidos


// Rutina de interrupción del ADC
ISR(ADC_vect) {
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	ADC2();
 158:	0e 94 8c 00 	call	0x118	; 0x118 <ADC2>
	adc_value = ADC;
 15c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 160:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 164:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_value>
	habilitar_conversion();
 168:	0e 94 95 00 	call	0x12a	; 0x12a <habilitar_conversion>
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_24>:
// Rutina de interrupción del TWI (I2C)
ISR(TWI_vect) {
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8; // Lee los 3 bits superiores del registro de estado
 19e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1a2:	88 7f       	andi	r24, 0xF8	; 248

	switch (estado) {
 1a4:	80 39       	cpi	r24, 0x90	; 144
 1a6:	c9 f0       	breq	.+50     	; 0x1da <__vector_24+0x4c>
 1a8:	38 f4       	brcc	.+14     	; 0x1b8 <__vector_24+0x2a>
 1aa:	80 37       	cpi	r24, 0x70	; 112
 1ac:	81 f0       	breq	.+32     	; 0x1ce <__vector_24+0x40>
 1ae:	80 38       	cpi	r24, 0x80	; 128
 1b0:	a1 f0       	breq	.+40     	; 0x1da <__vector_24+0x4c>
 1b2:	80 36       	cpi	r24, 0x60	; 96
 1b4:	61 f5       	brne	.+88     	; 0x20e <__vector_24+0x80>
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <__vector_24+0x40>
 1b8:	88 3b       	cpi	r24, 0xB8	; 184
 1ba:	c9 f0       	breq	.+50     	; 0x1ee <__vector_24+0x60>
 1bc:	18 f4       	brcc	.+6      	; 0x1c4 <__vector_24+0x36>
 1be:	88 3a       	cpi	r24, 0xA8	; 168
 1c0:	b1 f0       	breq	.+44     	; 0x1ee <__vector_24+0x60>
 1c2:	25 c0       	rjmp	.+74     	; 0x20e <__vector_24+0x80>
 1c4:	80 3c       	cpi	r24, 0xC0	; 192
 1c6:	e9 f0       	breq	.+58     	; 0x202 <__vector_24+0x74>
 1c8:	88 3c       	cpi	r24, 0xC8	; 200
 1ca:	d9 f0       	breq	.+54     	; 0x202 <__vector_24+0x74>
 1cc:	20 c0       	rjmp	.+64     	; 0x20e <__vector_24+0x80>
		case 0x60: // SLA+W recibido, ACK enviado
		case 0x70: // SLA+W recibido en modo general, ACK enviado
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
 1ce:	ec eb       	ldi	r30, 0xBC	; 188
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	80 83       	st	Z, r24
		break;
 1d8:	1f c0       	rjmp	.+62     	; 0x218 <__vector_24+0x8a>

		case 0x80: // Datos recibidos, ACK enviado
		case 0x90: // Datos recibidos en llamada general, ACK enviado
		dato = TWDR; // Lee el dato recibido del registro de datos
 1da:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR |= (1 << TWINT); // Borra el flag TWINT para continuar
 1e2:	ec eb       	ldi	r30, 0xBC	; 188
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	80 83       	st	Z, r24
		break;
 1ec:	15 c0       	rjmp	.+42     	; 0x218 <__vector_24+0x8a>

		case 0xA8: // SLA+R recibido, ACK enviado
		case 0xB8: // Dato transmitido y ACK recibido
		TWDR = adc_value; // Carga el valor del ADC en el registro de datos
 1ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <adc_value>
 1f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
 1f6:	ec eb       	ldi	r30, 0xBC	; 188
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 6c       	ori	r24, 0xC0	; 192
 1fe:	80 83       	st	Z, r24
		break;
 200:	0b c0       	rjmp	.+22     	; 0x218 <__vector_24+0x8a>

		case 0xC0: // Dato transmitido y NACK recibido
		case 0xC8: // Último dato transmitido y ACK recibido
		TWCR |= (1 << TWINT) | (1 << TWEA); // Borra el flag TWINT y habilita ACK para el próximo byte
 202:	ec eb       	ldi	r30, 0xBC	; 188
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 6c       	ori	r24, 0xC0	; 192
 20a:	80 83       	st	Z, r24
		break;
 20c:	05 c0       	rjmp	.+10     	; 0x218 <__vector_24+0x8a>

		default: // Manejo de errores
		TWCR |= (1 << TWINT) | (1 << TWSTO); // Borra el flag TWINT y envía una condición de STOP
 20e:	ec eb       	ldi	r30, 0xBC	; 188
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	80 69       	ori	r24, 0x90	; 144
 216:	80 83       	st	Z, r24
		break;
	}
}
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <main>:

int main(void) {
	I2C_Slave_Init(SLAVE_ADDR); // Inicializa el esclavo I2C
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 2a 01 	call	0x254	; 0x254 <I2C_Slave_Init>
	ADC_init(128);
 22e:	80 e8       	ldi	r24, 0x80	; 128
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 48 00 	call	0x90	; 0x90 <ADC_init>
	ADC2();
 236:	0e 94 8c 00 	call	0x118	; 0x118 <ADC2>
	habilitar_conversion();
 23a:	0e 94 95 00 	call	0x12a	; 0x12a <habilitar_conversion>
	sei(); // Habilita interrupciones globales
 23e:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	81 ee       	ldi	r24, 0xE1	; 225
 244:	94 e0       	ldi	r25, 0x04	; 4
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x1e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x28>
 250:	00 00       	nop
 252:	f6 cf       	rjmp	.-20     	; 0x240 <main+0x18>

00000254 <I2C_Slave_Init>:
/*****************/
//Funcion para inicializar el esclavo
/*****************/

void I2C_Slave_Init(uint8_t adress){
	DDRC &= ~((1<<DDC4)|(1<<DDC4)); //PINES DE I2C COMO ENTRADAS
 254:	97 b1       	in	r25, 0x07	; 7
 256:	9f 7e       	andi	r25, 0xEF	; 239
 258:	97 b9       	out	0x07, r25	; 7
	
	//TWAR = address << 1 & 0b11111110;// se asigna la direccion
	TWAR = (adress <<1| 0x01); //direccion y habilitar la llamada general
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	81 60       	ori	r24, 0x01	; 1
 262:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//se habilita la interfaz ACK automatico, se habilita la ISR
	TWCR = (1<<TWEA)|(1<<TWEN)|(1<<TWIE);
 266:	85 e4       	ldi	r24, 0x45	; 69
 268:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26c:	08 95       	ret

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
